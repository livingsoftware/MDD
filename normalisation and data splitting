library(tidyr)
library(plyr)
library(dplyr)
library(tibble)
library(preprocessCore)

setwd(" ")

# Read files: GSE98793

GSE98793=readRDS("98793.rds")
dim(GSE98793) # 21715   192
GSE98793$rn <- rownames(GSE98793)

# Read files: GSE46743

GSE46743=readRDS("46743.rds")
GSE46743=as.data.frame(GSE46743)
dim(GSE46743)# 16289   160
GSE46743$rn <- rownames(GSE46743)

# Read files: GSE19738

GSE19738=readRDS("19738.rds")
dim(GSE19738)# 13891    67
GSE19738$rn <- rownames(GSE19738)



# Meta-file 

Meta.file_raw <- join_all(list(GSE98793, GSE46743, GSE19738), 
                          by = 'rn', type = 'inner')

# Remove "rn" (rowname) column

Meta.file_raw=column_to_rownames(Meta.file_raw, "rn")

# check dimensions
dim(Meta.file_raw)# 11068   419

# Have numbers in the df in the same format (optional)
Meta.file_raw= format(Meta.file_raw, scientific = FALSE)

# Pheno-data of the samples (containing “GSE_ID”, “Source” and “Batch”) was merged with the Meta.file_raw
A=read.csv("pheno38.csv")
B=read.csv("pheno93.csv")
C=readRDS("pheno43.rds")
PhenoData = rbind(A,B,C)
row.names(PhenoData)=PhenoData$sample_id
PhenoData=as.data.frame(t(PhenoData))
PhenoData=PhenoData[,intersect(colnames(Meta.file_raw),colnames(PhenoData))]
Metaphenofile = rbind( PhenoData,Meta.file_raw)

# Shuffling the samples (columns) in the created meta-file

set.seed(99) #to ensure data reproducibility

Metafile.shuffled = Metaphenofile[sample(1:ncol(Metaphenofile))]

#/ Divide data into 10 equal parts to perform cross-validation

Metafile.t= t(Metafile.shuffled) #transposed metafile

k=10

# 1st Sampling 

set.seed(99)

folds = sample(1:nrow(Metafile.t)%%k) #randomize
fold = 1  # selecting the fold to be tested

train1 = Metafile.t[folds != fold,]
test1 = Metafile.t[folds == fold,]

# Exporting the train and the test files

saveRDS(train1, "train1.rds")
saveRDS(test1, "test1.rds")

########################################normalization########################################################
#/ Reading data
Train1 = as.data.frame(readRDS("train1.rds"))
Test1 = as.data.frame(readRDS("test1.rds"))

#/ Samples from each batch need to be quantile normalized separately

#/ Sub-setting first set of data based on GSE IDs

# Sub-setting train data

GSE98793.Train1.raw=Train1[Train1$gse_id =="GSE98793",]
GSE98793.Train11.raw=Train1[Train1$batch =="1",]
GSE98793.Train12.raw=Train1[Train1$batch=="2",]
GSE46743.Train1.raw=Train1[Train1$gse_id=="GSE46743",]
GSE19738.Train1.raw=Train1[Train1$gse_id=="GSE19738",]

labels.Train11.GSE98793= GSE98793.Train11.raw[,c(1:4)]
labels.Train12.GSE98793= GSE98793.Train12.raw[,c(1:4)]
labels.Train1.GSE46743= GSE46743.Train1.raw[,c(1:4)]
labels.Train1.GSE19738= GSE19738.Train1.raw[,c(1:4)]

# Sub-setting Test data

GSE98793.Test1.raw=Test1[Test1$gse_id=="GSE98793",]
GSE98793.Test11.raw=Test1[Test1$batch=="1",]
GSE98793.Test12.raw=Test1[Test1$batch=="2",]
GSE46743.Test1.raw=Test1[Test1$gse_id=="GSE46743",]
GSE19738.Test1.raw=Test1[Test1$gse_id=="GSE19738",]
 
labels.Test11.GSE98793= GSE98793.Test11.raw[,c(1:4)]
labels.Test12.GSE98793= GSE98793.Test12.raw[,c(1:4)]
labels.Test1.GSE46743= GSE46743.Test1.raw[,c(1:4)]
labels.Test1.GSE19738= GSE19738.Test1.raw[,c(1:4)]

# 1.1 GSE98793

# a. Train data
Train11.GSE98793.df=t(GSE98793.Train11.raw)
Train11.GSE98793.df= Train11.GSE98793.df[-c(1:4),]
class(Train11.GSE98793.df)="numeric"
Train11.GSE98793.df=log2(Train11.GSE98793.df)

# Check for rows with negative values
abc=apply(Train11.GSE98793.df, 1, function(row) any(row<0))
length(which(abc)) # 0 rows with negative values

Train11.GSE98793.df[Train11.GSE98793.df<0]=0

# Normalize
Train11.GSE98793.qnorm=normalize.quantiles(Train11.GSE98793.df, copy = T,keep.names = T)
boxplot(Train11.GSE98793.qnorm)

# Save targets
Train11.GSE98793.targets= normalize.quantiles.determine.target(Train11.GSE98793.qnorm,target.length=NULL,subset=NULL)


# Add back the pheno-data

Train11.GSE98793.qnorm.ph= rbind(Train11.GSE98793.qnorm, t(labels.Train11.GSE98793))


# b. Test data

Test11.GSE98793.df=t(GSE98793.Test11.raw)
Test11.GSE98793.df= Test11.GSE98793.df[-c(1:4),]
class(Test11.GSE98793.df)="numeric"
Test11.GSE98793.df=log2(Test11.GSE98793.df)

# Check for rows with negative values
abc=apply(Test11.GSE98793.df, 1, function(row) any(row<0))
length(which(abc)) # 0 rows with negative values

Test11.GSE98793.df[Test11.GSE98793.df<0]=0

# Normalize
Test11.GSE98793.qnorm <- normalize.quantiles.use.target(Test11.GSE98793.df,Train11.GSE98793.targets,copy=TRUE,subset=NULL)

boxplot(Test11.GSE98793.qnorm)

# Add column and row names from original data
dimnames(Test11.GSE98793.qnorm)=dimnames(Test11.GSE98793.df)

# Add back the pheno-data

Test11.GSE98793.qnorm.ph= rbind(Test11.GSE98793.qnorm, t(labels.Test11.GSE98793))

#1.2 GSE98793

# a. Train data
Train12.GSE98793.df=t(GSE98793.Train12.raw)
Train12.GSE98793.df= Train12.GSE98793.df[-c(1:4),]
class(Train12.GSE98793.df)="numeric"
Train12.GSE98793.df=log2(Train12.GSE98793.df)

# Check for rows with negative values
abc=apply(Train12.GSE98793.df, 1, function(row) any(row<0))
length(which(abc)) # 0 rows with negative values

Train12.GSE98793.df[Train12.GSE98793.df<0]=0

# Normalize
Train12.GSE98793.qnorm=normalize.quantiles(Train12.GSE98793.df, copy = T,keep.names = T)
boxplot(Train12.GSE98793.qnorm)

# Save targets
Train12.GSE98793.targets= normalize.quantiles.determine.target(Train12.GSE98793.qnorm,target.length=NULL,subset=NULL)


# Add back the pheno-data

Train12.GSE98793.qnorm.ph= rbind(Train12.GSE98793.qnorm, t(labels.Train12.GSE98793))


# b. Test data

Test12.GSE98793.df=t(GSE98793.Test12.raw)
Test12.GSE98793.df= Test12.GSE98793.df[-c(1:4),]
class(Test12.GSE98793.df)="numeric"
Test12.GSE98793.df=log2(Test12.GSE98793.df)

# Check for rows with negative values
abc=apply(Test12.GSE98793.df, 1, function(row) any(row<0))
length(which(abc)) # 0 rows with negative values

Test12.GSE98793.df[Test12.GSE98793.df<0]=0

# Normalize
Test12.GSE98793.qnorm <- normalize.quantiles.use.target(Test12.GSE98793.df,Train12.GSE98793.targets,copy=TRUE,subset=NULL)

boxplot(Test12.GSE98793.qnorm)

# Add column and row names from original data
dimnames(Test12.GSE98793.qnorm)=dimnames(Test12.GSE98793.df)

# Add back the pheno-data

Test12.GSE98793.qnorm.ph= rbind(Test12.GSE98793.qnorm, t(labels.Test12.GSE98793))

# 2.GSE46743
# a. Train data

Train1.GSE46743.df=t(GSE46743.Train1.raw)
Train1.GSE46743.df= Train1.GSE46743.df[-c(1:4),]
class(Train1.GSE46743.df)="numeric"
Train1.GSE46743.df=log2(Train1.GSE46743.df)

# Check for rows with negative values
abc=apply(Train1.GSE46743.df, 1, function(row) any(row<0))
length(which(abc)) # 0 rows with negative values

Train1.GSE46743.df[Train1.GSE46743.df<0]=0

# Normalize
Train1.GSE46743.qnorm=normalize.quantiles(Train1.GSE46743.df, copy = T)
boxplot(Train1.GSE46743.qnorm)

# Save targets
Train1.GSE46743.targets= normalize.quantiles.determine.target(Train1.GSE46743.qnorm,target.length=NULL,subset=NULL)

# Add column and row names from original data
dimnames(Train1.GSE46743.qnorm)=dimnames(Train1.GSE46743.df)

# Add back the pheno-data

Train1.GSE46743.qnorm.ph= rbind(Train1.GSE46743.qnorm, t(labels.Train1.GSE46743))
#View(Train1.GSE38481.qnorm.ph)

# b. Test data
Test1.GSE46743.df=t(GSE46743.Test1.raw)
Test1.GSE46743.df= Test1.GSE46743.df[-c(1:4),]
class(Test1.GSE46743.df)="numeric"
Test1.GSE46743.df=log2(Test1.GSE46743.df)

# Check for rows with negative values
abc=apply(Test1.GSE46743.df, 1, function(row) any(row<0))
length(which(abc)) # 101 rows with negative values

Test1.GSE46743.df[Test1.GSE46743.df<0]=0

# Normalize

Test1.GSE46743.qnorm <- normalize.quantiles.use.target(Test1.GSE46743.df,Train1.GSE46743.targets,copy=TRUE,subset=NULL)

boxplot(Test1.GSE46743.qnorm)

# Add column and row names from the original data
dimnames(Test1.GSE46743.qnorm)=dimnames(Test1.GSE46743.df)

# Add back the pheno-data

Test1.GSE46743.qnorm.ph= rbind(Test1.GSE46743.qnorm, t(labels.Test1.GSE46743))


# 3.GSE19738
# a. Train data

Train1.GSE19738.df=t(GSE19738.Train1.raw)
Train1.GSE19738.df= Train1.GSE19738.df[-c(1:4),]
class(Train1.GSE19738.df)="numeric"
Train1.GSE19738.df=log2(Train1.GSE19738.df)

# Check for rows with negative values
abc=apply(Train1.GSE19738.df, 1, function(row) any(row<0))
length(which(abc)) # 400 rows with negative values

Train1.GSE19738.df[Train1.GSE19738.df<0]=0

# Normalize
Train1.GSE19738.qnorm=normalize.quantiles(Train1.GSE19738.df, copy = T)
boxplot(Train1.GSE19738.qnorm)

# Save targets
Train1.GSE19738.targets= normalize.quantiles.determine.target(Train1.GSE19738.qnorm,target.length=NULL,subset=NULL)

# Add column and row names from original data
dimnames(Train1.GSE19738.qnorm)=dimnames(Train1.GSE19738.df)

# Add back the pheno-data

Train1.GSE19738.qnorm.ph= rbind(Train1.GSE19738.qnorm, t(labels.Train1.GSE19738))
#View(Train1.GSE38481.qnorm.ph)

# b. Test data
Test1.GSE19738.df=t(GSE19738.Test1.raw)
Test1.GSE19738.df= Test1.GSE19738.df[-c(1:4),]
class(Test1.GSE19738.df)="numeric"
Test1.GSE19738.df=log2(Test1.GSE19738.df)

# Check for rows with negative values
abc=apply(Test1.GSE19738.df, 1, function(row) any(row<0))
length(which(abc)) # 101 rows with negative values

Test1.GSE19738.df[Test1.GSE19738.df<0]=0

# Normalize

Test1.GSE19738.qnorm <- normalize.quantiles.use.target(Test1.GSE19738.df,Train1.GSE19738.targets,copy=TRUE,subset=NULL)

boxplot(Test1.GSE19738.qnorm)

# Add column and row names from the original data
dimnames(Test1.GSE19738.qnorm)=dimnames(Test1.GSE19738.df)

# Add back the pheno-data

Test1.GSE19738.qnorm.ph= rbind(Test1.GSE19738.qnorm, t(labels.Test1.GSE19738))


Train1.qnorm=cbind(Train11.GSE98793.qnorm.ph,Train12.GSE98793.qnorm.ph, Train1.GSE46743.qnorm.ph, Train1.GSE19738.qnorm.ph)
#View(Train1.qnorm)
#colnames(Train1.qnorm)

Test1.qnorm=cbind(Test11.GSE98793.qnorm.ph,Test12.GSE98793.qnorm.ph ,Test1.GSE46743.qnorm.ph, Test1.GSE19738.qnorm.ph)
#View(Test1.qnorm)
#colnames(Test1.qnorm)

# save q-normalize train and Test data

Train1.qnorm.df=as.data.frame(Train1.qnorm)
saveRDS(Train1.qnorm.df, "train1.qnorm.rds")

Test1.qnorm.df=as.data.frame(Test1.qnorm)
saveRDS(Test1.qnorm.df, "test1.qnorm.rds")
# to obtain 10 iterations of the data change the value of fold from [0:9] 
